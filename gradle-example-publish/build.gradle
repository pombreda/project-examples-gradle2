/*
 * Copyright (C) 2013 JFrog Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


/**
 * There are 2 ways to activate the Artifactory Build-Info plugin.
 * 1. use apply from directly from the build.gradle as shown below.
 * 2. use the init script "gradle --init-script init.gradle" ATTENTION: Check the URL inside this init.gradle
 * 3. Copy the init.gradle to your ~/.gradle directory and execute normally. ATTENTION: Now the Artifactory URL will
 * always be applied to all your projects.
 *
 * Check the URL that apply uses to get the remote script
 *
 */

buildscript {
    repositories {
        maven { url 'http://oss.jfrog.org/repo' }
    }
    dependencies {
       classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '3.0.x-SNAPSHOT')
   //  classpath(group: 'org.jfrog.buildinfo', name: 'build-info-extractor-gradle', version: '2.2.2')
    }
    configurations.classpath {
	
        resolutionStrategy {
		resolutionStrategy.force "commons-codec:commons-codec:1.6"
            failOnVersionConflict()
            cacheDynamicVersionsFor 0, 'seconds'
            cacheChangingModulesFor 0, 'seconds'
        }
    }
	
}

import java.text.SimpleDateFormat
def globalVersion = new Version(currentVersion)
//def globalVersion = new Version('1.2.x-SNAPSHOT')

def javaProjects() {
    subprojects.findAll { new File(it.projectDir, 'src').directory }
}

allprojects {
    apply plugin: 'com.jfrog.artifactory'
    //apply plugin: 'artifactory-publish'
    group = 'org.jfrog.test.gradle.publish'
    version = globalVersion
    status = version.status
		
}

artifactoryPublish.skip = true

project('services') {
    artifactoryPublish.skip = true
}

configure(javaProjects()) {
    apply plugin: 'java'
    apply plugin: 'maven-publish'

    dependencies {
        testCompile 'junit:junit:4.7'
    }
   // manifest.mainAttributes(provider: 'gradle')

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact(file("$rootDir/gradle.properties")) // deploy arbitrary file
            }
        }
    }
}

project('api') {
    apply plugin: 'ivy-publish'

    publishing {
        publications {
            ivyJava(IvyPublication) {
                from components.java
                artifact(file("$rootDir/settings.gradle")) {
                    name "gradle-settings"
                    extension "txt"
                    type "text"
                }
		// The config below will add a extra attribute to the ivy.xml
		// See http://ant.apache.org/ivy/history/latest-milestone/concept.html#extra
		descriptor.withXml {
		    asNode().info[0].attributes().put('e:architecture', 'amd64')
		}
            }
        }
    }

    artifactoryPublish {
        publications(publishing.publications.ivyJava)
        properties {
            simpleFile '**:**:**:*@*', simpleFile: 'only on settings file'
        }
    }
}

artifactoryPublish.skip = true

artifactory {
    clientConfig.setIncludeEnvVars(true)
    clientConfig.info.addEnvironmentProperty('test.adding.dynVar',new java.util.Date().toString())
    //clientConfig.info.setBuildName('new-strange-name')
    //clientConfig.info.setBuildNumber(new java.util.Random(System.currentTimeMillis()).nextInt(20000).toString())

    //contextUrl = 'http://repo.jfrog.org/artifactory'
    contextUrl = 'http://localhost:8081/artifactory'
    publish {
        repository {
            repoKey = 'gradle-local'
            username = 'admin'
            password = 'password'
            ivy {
                ivyLayout = '[organization]/[module]/ivy-[revision].xml'
            }
        }
        defaults {
            //publishIvy & publishPom are true by default
            publishArtifacts = true
            publishIvy = true
            publications('mavenJava','ivyJava')
            properties = ['qa.level': 'basic']
            properties {
                archives 'org.jfrog:*:*:*@*', key1: 'val1 only on jars', key2: 'val2 only on jars'
                all 'org.jfrog:shared:1.?:*@*', key3: 'val3 only in shared', key4: 'val4 only in shared'
                all 'org.jfrog:*:1.?:*@*', key5: 'val5 on everything published', key6: 'val6 on everything published'
                all 'org.jfrog:*:2.?:*@*', nokey1: 'noVal1'
                foo 'org.jfrog:*:2.?:*@*', nokey1: 'noVal2'
            }
        }
    }
    resolve {
        repoKey = 'repo'
    }
}

class Version {
    String originalVersion
    String thisVersion
    String status
    Date buildTime

    Version(String versionValue) {
        buildTime = new Date()
        originalVersion = versionValue
        if (originalVersion.endsWith('-SNAPSHOT')) {
            status = 'integration'
            thisVersion = originalVersion.substring(0, originalVersion.length() - 'SNAPSHOT'.length()) + getTimestamp()
        } else {
            status = 'release'
            thisVersion = versionValue
        }
    }

    String getTimestamp() {
        // Convert local file timestamp to UTC
        def format = new SimpleDateFormat('yyyyMMddHHmmss')
        format.setCalendar(Calendar.getInstance(TimeZone.getTimeZone('UTC')));
        return format.format(buildTime)
    }

    String toString() {
        thisVersion
    }
}
